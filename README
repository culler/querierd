=====================================================
Why avahi and bonjour don't work on your home network
=====================================================
-------------------
and how to fix them
-------------------

An internet search turns up lots and lots of reports of problems with
avahi and bonjour of the following general nature: "when I first start
up my XXX device / service it works fine; all the devices can see it.
But after a certain time, XXX disappears.  Other devices cannot see
it."  A typical example is `Bug #657553`__
which remains unresolved as of January 2014.

__ http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=657553

When the avahi developers respond to these complaints, they usually
say it is not their fault and refer the plaintiff to `FAQ
#15`__ which says 

  "you most likely are experiencing trouble with a broken network
  driver or WLAN AP, which doesn't properly support IP multicasting."

__ http://avahi.org/wiki/Avah4users#FAQ

Well, great.  But what can be done about it?

What is going on?
~~~~~~~~~~~~~~~~~~

To explain the problem we need a little background on IP multicasting
and IGMP snooping.

Multicasting was designed for delivering high-bandwidth data streams,
TV in other words, across a network without completely choking off the
network.  If an internet TV station had to send its video stream to
each subscriber individually, the outgoing network link from the
station would have to carry many, many identical data streams.  There
is no way that they could possibly get enough bandwidth.  And anyway
it is silly to send many copies of the same stream.

Multicasting avoids this problem by providing a way for a single
stream to be delivered to many subscribers.  The outgoing stream is
directed to a single multicast address belonging to a "multicast
group".  When a router receives the packets of such a stream on its
upstream port, it sends a copy to each of its downstream ports
*provided that some downstream node on that port has joined the
multicast group.* How does it know whether any downstream nodes
belong to the group? That job is handled by the IGMP protocol.

The bandwidth problem is not limited to routers.  It also occurs on a
local area network, especially when wireless is involved.  If one
person on your LAN is watching TV on their iPad, connected to a
wireless access point which is connected to one port of your DNS or
cable router, then the router needs to deliver the stream to the WAP.
But the WAP is most likely behaving as a switch, not a router.  So
this would mean that every device connected to that WAP receives the
video stream, even if they are not watching TV. And that video stream
comes close to using all of the bandwidth available on the wireless
link.  To deal with this problem, switches use IGMP snooping.  See
the `wikipedia article`__.

__ http://en.wikipedia.org/wiki/IGMP_snooping#IGMP_querier

The idea of IGMP snooping is that a switch will watch the IGMP traffic
generated by the nodes it serves, to decide for each node which
multicast groups that node wants to belong to.  The switch then
notifies its upstream router that it wants to subscribe to all groups
which have at least one member among the nodes served by the switch.
If a node does not want to belong to a certain group, then the switch
will not send it any multicast packets for that group.  A key point
is this: while IGMP v2 provides a way for a node to leave a group,
the switch cannot count on a node sending a leave request.  First of
all, the leave requests did not exist in IGMP v1, which the node may
be using.  Secondly, the node might crash.  Therefore, a switch which
does IGMP snooping will remove any node which has not requested to
join the group within a certain time window.

But, you ask, what does this have to do with avahi or bonjour?  Well,
first of all, those protocols use multicasting.  There is a multicast
group for mDNS (the address is 224.0.0.251).  All of the communication
related to avahi or bonjour uses multicast packets sent to this
multicast group.

So now we see the problem.  The avahi or bonjour daemon on your device
joins the mDNS multicast group when it starts up.  But it is not the
job of the avahi-daemon to ensure that your device remains a member of
the nDNS group.  That is supposed to be handled automatically by the
switches, routers and nodes on the network, using IGMP.  The reason
your device disappears after a while is that the switch, probably a
WAP, does not hear any subsequent IGMP join requests from your device.
So, after a while, the switch stops forwarding any mDNS packets, and
the device "disappears".

What can be done?
~~~~~~~~~~~~~~~~~~

To understand how to deal with this we need a little more detail about
IGMP and IGMP snooping.  What is needed is for your device to
periodically send a request (actually called a "report" in IGMP) to
join the mDNS group before the switch decides to remove it from the
group.  As explained in the Wikipedia page, the IGMP protocol deals
with this by requiring that each network have a router which functions
as an "IGMP querier".  In IGMP v2 this router is "elected" by choosing
the router with the lowest address.  The job of the querier is to send
an IGMP query packet to the multicast broadcast address (224.0.0.1)
every so often.  Switches are required to send these broadcast packets
to all of their nodes.  When a node receives a query packet it
responds (after a random delay and subject to a countdown timer) by
sending a request to join all groups that it want to belong to.

Unfortunately, however, cheap home network routers like the ones that
you and I buy do not provide an IGMP querier.  That is the reason
that avahi and bonjour do not work on your network.

The good news is that this problem is easy to fix.  All we need to do
is run a little daemon which sends an IGMP query to the multicast
broadcast address at regular intervals.  The querierd is such a
daemon.  Once you start it up on your selected computer your devices
will stop disappearing.

The current version of querierd will participate in the
querier election process, so you can run querierd daemons on several
devices on your network, and they will cooperate with any routers
which provide the querier service.

NOTE: A C implementation with similar functionality is available
from Daniel Lorch: `igmp-querier`__.

__ https://github.com/dlorch/igmp-querier
